<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHZ0325&#39;s Space</title>
  
  <subtitle>只有翻过这座山才能让他们听到你的故事</subtitle>
  <link href="https://whz0325.github.io/atom.xml" rel="self"/>
  
  <link href="https://whz0325.github.io/"/>
  <updated>2019-07-28T11:39:00.000Z</updated>
  <id>https://whz0325.github.io/</id>
  
  <author>
    <name>WHZ0325</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【音乐】我的梦</title>
    <link href="https://whz0325.github.io/dream-it-possible/"/>
    <id>https://whz0325.github.io/dream-it-possible/</id>
    <published>2019-07-28T11:21:00.000Z</published>
    <updated>2019-07-28T11:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<center>一直地一直地往前走</center><center>疯狂的世界</center><center>迎着痛把眼中所有梦</center><center>都交给时间</center><center>想飞就用心地去飞</center><center>谁不经历狼狈</center><center>我想我会忽略失望的灰</center><center>拥抱遗憾的美</center><center>我的梦说别停留等待</center><hr><center>就让光芒折射泪湿的瞳孔</center><center>映出心中最想拥有的彩虹</center><center>带我奔向那片有你的天空</center><center>因为你是我的梦</center><center>我的梦</center><hr><center>执着地勇敢地不回头</center><center>穿过了黑夜踏过了边界</center><center>路过雨路过风往前冲</center><center>总会有一天站在你身边</center><center>泪就让它往下坠</center><center>溅起伤口的美</center><center>哦别以为失去的最宝贵</center><center>才让今天浪费</center><center>我的梦说别停留等待</center><hr><center>就让光芒折射泪湿的瞳孔</center><center>映出心中最想拥有的彩虹</center><center>带我奔向那片有你的天空</center><center>因为你是我的梦</center><center>我的梦</center><center>我的梦</center><center>我的梦</center><hr><center>世界会怎么变化</center><center>都不是意外</center><center>记得用心去回答</center><center>命运的精彩</center><center>世界会怎么变化</center><center>都离不开爱</center><center>记得成长的对话</center><center>勇敢地说我不再等待</center><hr><center>就让光芒折射泪湿的瞳孔</center><center>映出心中最想拥有的彩虹</center><center>带我奔向那片有你的天空</center><center>因为你是我的梦</center><center>我的梦</center><center>我的梦</center><center>因为你是我的梦</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;一直地一直地往前走&lt;/center&gt;

&lt;center&gt;疯狂的世界&lt;/center&gt;

&lt;center&gt;迎着痛把眼中所有梦&lt;/center&gt;

&lt;center&gt;都交给时间&lt;/center&gt;

&lt;center&gt;想飞就用心地去飞&lt;/center&gt;

&lt;center&gt;谁</summary>
      
    
    
    
    <category term="音乐" scheme="https://whz0325.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>【网络流24题】火星探险问题</title>
    <link href="https://whz0325.github.io/network-flow-mars/"/>
    <id>https://whz0325.github.io/network-flow-mars/</id>
    <published>2019-05-03T03:38:00.000Z</published>
    <updated>2019-05-03T09:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 $p\times q$ 个位置，每个位置可能平坦无障碍、有障碍或有石块，$n$ 个探测车从左上角 $(1,1)$ 出发，每次只能往右或往下走，到达 $(q,p)$，输出使采集岩石最多时每辆车的行走方案。</p><p>$n,p,q\le 35$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>难点在于如何表示取走石块，将每个点拆点为 $x$ 和 $x’$，$x\to x’$ 连接一条容量为 $1$ 权值为 $-1$ 的边，$x\to x’$ 连接一条容量为无穷大权值为 $0$ 的边即可，最后跑最小费用最大流。</p><p>注意费用流的反向边。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span><span class="keyword">int</span> v,c,f,w;&#125; edges[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],nxt[M&lt;&lt;<span class="number">1</span>],idx=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;idx=<span class="number">0</span>;<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(head));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    edges[idx]=(edge)&#123;v,c,<span class="number">0</span>,w&#125;;nxt[idx]=head[u];head[u]=idx++;</span><br><span class="line">    edges[idx]=(edge)&#123;u,<span class="number">0</span>,<span class="number">0</span>,-w&#125;;nxt[idx]=head[v];head[v]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[N],inq[N],a[N],pa[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(d));d[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    std::queue&lt;<span class="keyword">int</span>&gt; q;q.<span class="built_in">push</span>(s);a[s]=INF;pa[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();inq[x]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];~i;i=nxt[i]) &#123;</span><br><span class="line">            edge &amp;e=edges[i];</span><br><span class="line">            <span class="keyword">if</span>(e.c&gt;e.f&amp;&amp;d[e.v]&gt;d[x]+e.w) &#123;</span><br><span class="line">                d[e.v]=d[x]+e.w;pa[e.v]=i;</span><br><span class="line">                a[e.v]=std::<span class="built_in">min</span>(a[x],e.c-e.f);</span><br><span class="line">                <span class="keyword">if</span>(!inq[e.v]) &#123;q.<span class="built_in">push</span>(e.v);inq[e.v]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[t]==INF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> u=t;cost+=a[t]*d[t];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        edges[pa[u]].f+=a[t];</span><br><span class="line">        edges[pa[u]^<span class="number">1</span>].f-=a[t];</span><br><span class="line">        <span class="keyword">if</span>(u==s) <span class="keyword">break</span>;u=edges[pa[u]^<span class="number">1</span>].v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">SPFA</span>(s,t,ans));</span><br><span class="line">    <span class="keyword">return</span> -ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,p,q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];~i;i=nxt[i]) &#123;</span><br><span class="line">        edge &amp;e=edges[i];</span><br><span class="line">        <span class="keyword">if</span>(e.f&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e.v&lt;x) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,rt,(e.v==x-q*p+<span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            --e.f;<span class="built_in">dfs</span>(e.v,rt);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;p,&amp;q);<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> state;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;state);</span><br><span class="line">            <span class="keyword">if</span>(state==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="number">1</span>+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,INF,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(state==<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="number">1</span>+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="number">1</span>+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,INF,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i!=q) <span class="built_in">addEdge</span>(<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+i*p+j,INF,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(j!=p) <span class="built_in">addEdge</span>(<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+(i<span class="number">-1</span>)*p+j+<span class="number">1</span>,INF,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">addEdge</span>(<span class="number">1</span>,<span class="number">2</span>,n,<span class="number">0</span>);<span class="built_in">addEdge</span>(<span class="number">1</span>+(p*q*<span class="number">2</span>),<span class="number">1</span>+(p*q*<span class="number">2</span>)+<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>+(q*p*<span class="number">2</span>)+<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">dfs</span>(<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定 $p\times q$ 个位置，每个位置可能平坦无障碍、有障碍或有石块，$n$ 个探测车从左上角 $(1,1)$ 出发</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="费用流" scheme="https://whz0325.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>【NOI 2010】能量采集</title>
    <link href="https://whz0325.github.io/noi-2010-energy/"/>
    <id>https://whz0325.github.io/noi-2010-energy/</id>
    <published>2019-05-03T01:55:00.000Z</published>
    <updated>2021-06-16T15:20:12.724Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>栋栋有一块长方形的地，他在地上种了一种能量植物，这种植物可以采集太阳光的能量。在这些植物采集能量后，栋栋再使用一个能量汇集机器把这些植物采集到的能量汇集到一起。</p><p>栋栋的植物种得非常整齐，一共有 $n$ 列，每列有 $m$ 棵，植物的横竖间距都一样，因此对于每一棵植物，栋栋可以用一个坐标 $(x,y)$ 来表示，其中 $x$ 的范围是 $1$ 至 $n$，表示是在第 $x$ 列，$y$ 的范围是 $1$ 至 $m$，表示是在第 $x$ 列的第 $y$ 棵。</p><p>由于能量汇集机器较大，不便移动，栋栋将它放在了一个角上，坐标正好是 $(0,0)$。</p><p>能量汇集机器在汇集的过程中有一定的能量损失。如果一棵植物与能量汇集机器连接而成的线段上有k棵植物，则能 量的损失为 $2k+1$。例如，当能量汇集机器收集坐标为 $(2,4)$ 的植物时，由于连接线段上存在一棵植物 $(1,2)$，会产生 $3$ 的能量损失。注意，如果一棵植物与能量汇集机器连接的线段上没有植物，则能量损失为 $1$。现在要计算总的能量损失。</p><p>$1\le n,m\le 100,000$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>首先从 $(0,0)$ 到 $(x,y)$ 路径上的格点个数为 $gcd(x,y)-1$，因为每走 $(\frac{x}{gcd(x,y)},\frac{y}{gcd(x,y)})$ 就会有一个格点，而不包括端点。</p><p>所以问题所求即 $\sum_{i=1}^{n}\sum_{j=1}^m(2(gcd(i,j)-1)+1)=\sum_{i=1}^{n}\sum_{j=1}^m(2gcd(i,j)-1)$。</p><p>做法一：莫比乌斯反演</p><p>将式子转化一下变成 $2\sum_{i=1}^n\sum_{j=1}^mgcd(i,j)-n\times m$，考虑用莫比乌斯反演推出 $\sum_{i=1}^n\sum_{j=1}^mgcd(i,j)$ 的值。</p><p>枚举 $gcd(i,j)$ 的值得到 $\sum_{g=1}^{min{n,m}}g\sum_{i=1}^n\sum_{j=1}^m[gcd(i,j)=g]=\sum_{g=1}^{min{n,m}}g\sum_{i=1}^\frac{n}{g}\sum_{j=1}^\frac{m}{g}[gcd(i,j)=1]$。</p><p>莫比乌斯反演得原式等于 $\sum_{g=1}^{min{n,m}}g\sum_{i=1}^\frac{n}{g}\sum_{j=1}^\frac{m}{g}\sum_{d|gcd(i,j)}\mu(d)=\sum_{g=1}^{min{n,m}}g\sum_{i=1}^\frac{n}{g}\sum_{j=1}^\frac{m}{g}\sum_{d|i且 d|j}\mu(d)$。</p><p>枚举 $d$ 的值得到 $\sum_{g=1}^{min{n,m}}g\sum_{d=1}^{\lfloor\frac{min{n,m}}{g}\rfloor}\mu(d)\lfloor\frac{n}{gd}\rfloor\lfloor\frac{n}{gd}\rfloor$，然后我到这里就不会推了？？？</p><p>其实这里就可以直接算了，根据调和级数，时间复杂度大约是 $O(n\ln{n})$。注意初始化 $mu[1]=1$。</p><p>做法二：容斥原理</p><p>洛谷题解上还有一种高妙的做法：容斥原理。</p><p>设 $f[x]$ 表示 $i\in[1,n],j\in[1,m]$ 时 $gcd(i,j)=x$ 的个数，则 $f[x]=\lfloor\frac{n}{x}\rfloor\times\lfloor\frac{m}{x}\rfloor$，然而这里面还可能包括 $gcd(i,j)=2x$、$gcd(i,j)=3x$ 之类的情况，这样只需再枚举 $x$ 的倍数，把这些情况减去即可。</p><p>由于要确保之前的情况已经计算过，因此需要倒序求。</p><p>根据调和级数，时间复杂度为 $O(n\ln n)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>做法一：莫比乌斯反演</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">int</span> p[N],mu[N],v[N],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[i]) &#123;p[cnt++]=i;mu[i]=<span class="number">-1</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*p[j]&lt;=n;++j) &#123;</span><br><span class="line">            v[i*p[j]]=p[j];</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                mu[i*p[j]]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mu[i*p[j]]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ll ans=<span class="number">0</span>;<span class="built_in">sieve</span>(std::<span class="built_in">min</span>(n,m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> g=<span class="number">1</span>;g&lt;=std::<span class="built_in">min</span>(n,m);++g) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> d=<span class="number">1</span>;g*d&lt;=std::<span class="built_in">min</span>(n,m);++d) &#123;</span><br><span class="line">            ans+=(ll)g*mu[d]*(n/(g*d))*(m/(g*d));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans&lt;&lt;<span class="number">1</span>)-(ll)n*m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做法二：容斥原理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line">ll f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=std::<span class="built_in">min</span>(n,m);i&gt;=<span class="number">1</span>;--i) &#123;</span><br><span class="line">        f[i]=(ll)(n/i)*(m/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=(i&lt;&lt;<span class="number">1</span>);j&lt;=std::<span class="built_in">min</span>(n,m);j+=i) f[i]-=f[j];</span><br><span class="line">        ans+=f[i]*((i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;栋栋有一块长方形的地，他在地上种了一种能量植物，这种植物可以采集太阳光的能量。在这些植物采集能量后，栋栋再使用一个能量汇集机</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="容斥原理" scheme="https://whz0325.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
    <category term="莫比乌斯反演" scheme="https://whz0325.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>【ZJOI 2007】报表统计</title>
    <link href="https://whz0325.github.io/zjoi-2007-form/"/>
    <id>https://whz0325.github.io/zjoi-2007-form/</id>
    <published>2019-05-02T09:23:00.000Z</published>
    <updated>2019-05-02T09:31:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>维护一个初始长度为 $n$ 的非负整数序列，支持一下三种操作：</p><ul><li>在<strong>初始</strong>第 $i$ 个整数后面插入一个整数，若<strong>初始</strong>第 $i$ 个整数后面已经插入过其它整数，则将该整数插入到这些整数的最后面。</li><li>查询整个序列中相邻两个元素之间差值的最小值。</li><li>查询整个序列中任意两个元素之间差值的最小值。</li></ul><p>$n,m\le 500000$，序列内的整数不超过 $5\times 10^8$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>水题我都不会写。。。</p><p>对于每个初始整数及它后面插入的数放在一起维护，记录每段左右两端的值，由于相邻两个元素可能会变化，因此使用可重集合维护，第二种询问维护序列中所有整数的集合，在每次插入时直接二分与它最接近的两个整数更新答案即可。</p><p>时间复杂度为 $O(nlog_2n)$，卡常数。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></span><br><span class="line">std::set&lt;<span class="keyword">int</span>&gt; s;std::map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;<span class="keyword">int</span> lval[N],rval[N],minsortgap=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gap_insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mp.<span class="built_in">find</span>(x)==mp.<span class="built_in">end</span>()) mp[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> ++mp[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gap_erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(!(--mp[x])) mp.<span class="built_in">erase</span>(mp.<span class="built_in">find</span>(x));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sortgap_insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    std::set&lt;<span class="keyword">int</span>&gt;::iterator it=s.<span class="built_in">lower_bound</span>(x),is=s.<span class="built_in">upper_bound</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(it!=s.<span class="built_in">end</span>()) minsortgap=std::<span class="built_in">min</span>(minsortgap,*it-x);</span><br><span class="line">    <span class="keyword">if</span>(is!=s.<span class="built_in">begin</span>()) minsortgap=std::<span class="built_in">min</span>(minsortgap,x-*(--is));</span><br><span class="line">    s.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);lval[i]=rval[i]=x;</span><br><span class="line">        <span class="keyword">if</span>(i<span class="number">-1</span>) <span class="built_in">gap_insert</span>(<span class="built_in">abs</span>(lval[i]-rval[i<span class="number">-1</span>]));</span><br><span class="line">        <span class="built_in">sortgap_insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">char</span> opt[<span class="number">100</span>];<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;i,&amp;k);</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n) &#123;</span><br><span class="line">                <span class="built_in">gap_erase</span>(<span class="built_in">abs</span>(lval[i+<span class="number">1</span>]-rval[i]));</span><br><span class="line">                <span class="built_in">gap_insert</span>(<span class="built_in">abs</span>(lval[i+<span class="number">1</span>]-k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">gap_insert</span>(<span class="built_in">abs</span>(k-rval[i]));rval[i]=k;<span class="built_in">sortgap_insert</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">4</span>]==<span class="string">&#x27;G&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mp.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,minsortgap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;维护一个初始长度为 $n$ 的非负整数序列，支持一下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;初始&lt;/stro</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="STL" scheme="https://whz0325.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>【APIO 2015】巴邻旁之桥</title>
    <link href="https://whz0325.github.io/apio-2015-bridge/"/>
    <id>https://whz0325.github.io/apio-2015-bridge/</id>
    <published>2019-05-02T04:46:00.000Z</published>
    <updated>2019-05-02T05:00:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一条东西走向的穆西河将巴邻旁市一分为二，分割成了区域 $A$ 和区域 $B$。</p><p>每一块区域沿着河岸都建了恰好 $1000000001$ 栋的建筑，每条岸边的建筑都从 $0$ 编号到 $1000000000$。相邻的每对建筑相隔 $1$ 个单位距离，河的宽度也是 $1$ 个单位长度。区域 $A$ 中的 $i$ 号建筑物恰好与区域 $B$ 中的 $i$ 号建筑物隔河相对。</p><p>城市中有 $N$ 个居民。第 $i$ 个居民的房子在区域 $P_i$ 的 $S_i$ 号建筑上，同时他的办公室坐落在 $Q_i$ 区域的 $T_i$ 号建筑上。一个居民的房子和办公室可能分布在河的两岸，这样他就必须要搭乘船只才能从家中去往办公室，这种情况让很多人都觉得不方便。为了使居民们可以开车去工作，政府决定建造不超过 $K$ 座横跨河流的大桥。</p><p>由于技术上的原因，每一座桥必须刚好连接河的两岸，桥梁必须严格垂直于河流，并且桥与桥之间不能相交。</p><p>当政府建造最多 $K$ 座桥之后，设 $D_i$ 表示第 $i$ 个居民此时开车从家里到办公室的最短距离。请帮助政府建造桥梁，使得 $D_1+D_2+\dots +D_N$ 最小。</p><p>$K=2$，$1\le N\le 100000$，$P_i$ 和 $Q_i$ 为字符 “A” 和 “B” 中的一个，$0\le S_i,T_i\le 1000000000$，同一栋建筑内可能有超过 $1$ 间房子或办公室（或二者的组合，即房子或办公室的数量同时大于等于 $1$）。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>当 $K=1$ 时很好算，列一下式子就会发现桥梁取在所有 $S_i$ 和 $T_i$ 的中位数处即可，这是个经典模型。</p><p>当 $K=2$ 时，我们可以发现，若 $S_i,T_i$ 之间有桥，则会通过这座桥，否则每个居民一定会选择距离自己两个端点最近的桥通过，也是距离两个端点所连成线段中点最近的桥。</p><p>按 $S_i,T_i$ 的中点对居民排序，则选择两座桥的居民分别形成一段连续的区间，枚举两个区间的分界点分别求出两边桥的位置即可。</p><p>问题转化为动态维护中位数以及中位数到其它点的距离，可以用权值线段树实现（离散化或动态开点）。</p><p>时间复杂度为 $O(nlog_2n)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SGT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz[N&lt;&lt;<span class="number">3</span>];ll sum[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">SGT</span>() &#123;<span class="built_in">memset</span>(sz,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sz));<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sum));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d,<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;sz[o]+=d;sum[o]+=d*s;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(o&lt;&lt;<span class="number">1</span>,l,mid,x,d,s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=x) <span class="built_in">modify</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,d,s);</span><br><span class="line">            sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];sum[o]=sum[o&lt;&lt;<span class="number">1</span>]+sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=sz[o&lt;&lt;<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">query</span>(o&lt;&lt;<span class="number">1</span>,l,mid,k);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k-sz[o&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">querySz</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> sz[o];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=mid) ans+=<span class="built_in">querySz</span>(o&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr) ans+=<span class="built_in">querySz</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> sum[o];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=mid) ans+=<span class="built_in">querySum</span>(o&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr) ans+=<span class="built_in">querySum</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type</span> &#123;</span><span class="keyword">int</span> s,t;&#125; loc[N];<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> type &amp;a,<span class="keyword">const</span> type &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.s+a.t&lt;b.s+b.t;&#125;</span><br><span class="line"><span class="keyword">int</span> h[N&lt;&lt;<span class="number">1</span>],sz=<span class="number">0</span>;<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> std::<span class="built_in">lower_bound</span>(h,h+sz,x)-h+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,n;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;k,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> p[<span class="number">2</span>],q[<span class="number">2</span>];<span class="keyword">int</span> s,t;<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%s%d&quot;</span>,p,&amp;s,q,&amp;t);</span><br><span class="line">            <span class="keyword">if</span>(p[<span class="number">0</span>]==q[<span class="number">0</span>]) ans+=<span class="built_in">abs</span>(t-s);</span><br><span class="line">            <span class="keyword">else</span> &#123;h[sz++]=s;h[sz++]=t;++ans;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(h,h+sz);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;++i) ans+=<span class="built_in">abs</span>(h[sz/<span class="number">2</span>]-h[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> p[<span class="number">2</span>],q[<span class="number">2</span>];<span class="keyword">int</span> s,t;<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%s%d&quot;</span>,p,&amp;s,q,&amp;t);</span><br><span class="line">            <span class="keyword">if</span>(p[<span class="number">0</span>]==q[<span class="number">0</span>]) ans+=<span class="built_in">abs</span>(t-s);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                h[sz++]=s;h[sz++]=t;</span><br><span class="line">                loc[cnt++]=(type)&#123;p[<span class="number">0</span>]&lt;q[<span class="number">0</span>]?s:t,p[<span class="number">0</span>]&lt;q[<span class="number">0</span>]?t:s&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(loc,loc+cnt,cmp);</span><br><span class="line">        std::<span class="built_in">sort</span>(h,h+sz);sz=std::<span class="built_in">unique</span>(h,h+sz)-h;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i) &#123;</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].s),<span class="number">1</span>,loc[i].s);</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].t),<span class="number">1</span>,loc[i].t);</span><br><span class="line">        &#125;</span><br><span class="line">        ll res=<span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i) &#123;</span><br><span class="line">            sgt[<span class="number">0</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].s),<span class="number">1</span>,loc[i].s);</span><br><span class="line">            sgt[<span class="number">0</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].t),<span class="number">1</span>,loc[i].t);</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].s),<span class="number">-1</span>,loc[i].s);</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].t),<span class="number">-1</span>,loc[i].t);</span><br><span class="line">            <span class="keyword">int</span> ls=sgt[<span class="number">0</span>].<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,sz,i+<span class="number">1</span>),rs=sgt[<span class="number">1</span>].<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,sz,cnt-i<span class="number">-1</span>);</span><br><span class="line">            ll cur=(ll)sgt[<span class="number">0</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,ls)*h[ls<span class="number">-1</span>]-sgt[<span class="number">0</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,ls);</span><br><span class="line">            cur+=sgt[<span class="number">0</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,ls,sz)-(ll)sgt[<span class="number">0</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,ls,sz)*h[ls<span class="number">-1</span>];</span><br><span class="line">            cur+=(ll)sgt[<span class="number">1</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,rs)*h[rs<span class="number">-1</span>]-sgt[<span class="number">1</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,rs);</span><br><span class="line">            cur+=sgt[<span class="number">1</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,rs,sz)-(ll)sgt[<span class="number">1</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,rs,sz)*h[rs<span class="number">-1</span>];</span><br><span class="line">            res=std::<span class="built_in">min</span>(res,cur+cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(res^<span class="number">0x3f3f3f3f3f3f3f3f</span>LL)?ans+res:ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;一条东西走向的穆西河将巴邻旁市一分为二，分割成了区域 $A$ 和区域 $B$。&lt;/p&gt;
&lt;p&gt;每一块区域沿着河岸都建了恰好 </summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线段树" scheme="https://whz0325.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【SHOI 2015】超能粒子炮·改</title>
    <link href="https://whz0325.github.io/bzoj-4591/"/>
    <id>https://whz0325.github.io/bzoj-4591/</id>
    <published>2019-05-01T00:28:00.000Z</published>
    <updated>2021-06-16T15:25:41.147Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有 $t$ 组数据，每组数据给定 $n,k$，求 $\sum_{i=0}^kC_n^i\mod 2333$ 的值。</p><p>$t\le 100000$，$n,k\le 10^{18}$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>感觉可能是套路题……</p><p>设 $f[n][k]=\sum_{i=0}^kC_n^i\mod 2333$，推一下式子。</p><p>由 Lucas 定理得 $f[n][k]=\sum_{i=0}^kC_n^i\mod 2333=\sum_{i=0}^kC_{n/p}^{i/p}C_{n\mod p}^{i\mod p}$，这里的 $/$ 表示的是下取整，$p$ 表示模数 $2333$。</p><p>看到 $\sum_{i=0}^k$ 和 $i/p$ 可以考虑数论分块，则 $f[n][k]$<br>$=\sum_{i=0}^{k/p-1}C_{n/p}^i\sum_{j=0}^{p-1}C_{n\mod p}^j+\sum_{i=0}^{k\mod p}C_{n/p}^{k/p}C_{n\mod p}^{i}$<br>$=f[n/p][k/p-1]\times f[n\mod p][p-1]+C_{n/p}^{k/p}\times f[n\mod p][k\mod p]$。</p><p>其中 $n,k\lt p$ 时 $f[n][k]$ 的值可以直接 $n^2$ 组合数递推枚举出来，$C_{n/p}^{k/p}$ 的值可以直接使用 Lucas 定理求出，而 $f[n/p][k/p-1]$ 的值直接递归下去即可。</p><p>时间复杂度是 $O(p^2+t\log_p{max{n,k}})$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">2333</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">return</span> x&gt;=p?x-p:x;&#125;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2505</span>][<span class="number">2505</span>],f[<span class="number">2505</span>][<span class="number">2505</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(ll n,ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;p&amp;&amp;k&lt;p) <span class="keyword">return</span> c[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Lucas</span>(n/p,k/p)*c[n%p][k%p]%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(ll n,ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;p&amp;&amp;k&lt;p) <span class="keyword">return</span> f[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">inc</span>(<span class="built_in">calc</span>(n/p,k/p<span class="number">-1</span>)*f[n%p][p<span class="number">-1</span>]%p,f[n%p][k%p]*<span class="built_in">Lucas</span>(n/p,k/p)%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p;++i) &#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;++j) c[i][j]=<span class="built_in">inc</span>(c[i<span class="number">-1</span>][j<span class="number">-1</span>],c[i<span class="number">-1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;++i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>]=c[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;p;++j) f[i][j]=<span class="built_in">inc</span>(f[i][j<span class="number">-1</span>],c[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ll n,k;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2333</span>&amp;&amp;k&lt;<span class="number">2333</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[n][k]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">calc</span>(n,k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;有 $t$ 组数据，每组数据给定 $n,k$，求 $\sum_{i=0}^kC_n^i\mod 2333$ 的值。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【国家集训队 2011】礼物</title>
    <link href="https://whz0325.github.io/nt-2011-gift/"/>
    <id>https://whz0325.github.io/nt-2011-gift/</id>
    <published>2019-04-29T02:56:00.000Z</published>
    <updated>2019-04-30T06:12:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有 $n$ 件礼物，打算送给 $m$ 个人，其中送给第 $i$ 个人的礼物数量为 $w_i$，求送出礼物的方案数，输出答案模 $p$ 的结果，无解输出 $Impossible$。</p><p>设 $p=p_1^{c_1}p_2^{c_2}p_3^{c_3}\dots p_t^{c_t}$，$p_i$ 为质数。$1\le n\le 10^9$，$1\le m\le 5$，$1\le p_i^{c_i}\le 10^5$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>以为是水题，看来我还是 naive……</p><p>首先不难发现答案就是 $C_n^{w_1}C_{n-w_1}^{w_2}\dots C_{n-w_1-w_2-\dots w_{m-1}}^{w_m}$，考虑如何计算这个式子。</p><p>$m$ 比较小，直接枚举计算每个组合数的值乘起来就是最终的答案，由于 $n$ 较大，$p$ 不一定为质数，每个组合数的值看起来不那么好算。</p><p>考虑 ExLucas 定理？由于 Lucas 定理的前提是模数为质数，而每个质因子上的指数可能大于 $1$，因此无法分解模数后 Lucas 定理再使用中国剩余定理合并。</p><p>这样 Lucas 定理的部分就只能直接算了，还是考虑分解模数然后用中国剩余定理合并，要保证数与模数互质才能用扩展欧几里得算法求出该数的逆元套用组合数公式，所以把阶乘中的 $p_i$ 提取出来，同时计算 $n!\mod p_i^{k_i}$ 剩下的部分。</p><p>记 $s_i=p_i^{k_i}$，可以将 $n!$ 分解一下，有 $\lfloor\frac{n}{p_i}\rfloor$ 个数是 $p_i$ 的倍数，这部分将他们都除以 $p_i$ 后就变成了 $\lfloor\frac{n}{p_i}\rfloor!$，是原问题的子问题，递归下去就可以了。剩下的不为 $p_i$ 倍数的部分应该怎么算呢？可以发现一个性质，那就是每 $s_i$ 个数（包含 $p_i$ 的倍数）中剩下的数乘积为定值，求出多少这样的块，乘方一下然后对后面不满的块单独计算就好了。</p><p>时间复杂度大概是 $O(5\times 20^2\times 10^5)$，不太好分析，总之肯定能过的。</p><p>参考题解：<a href="https://blog.csdn.net/clover_hxy/article/details/52250440">CSDN</a>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">25</span>],c[<span class="number">25</span>],s[<span class="number">25</span>],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> p)</span> </span>&#123;x+=y;<span class="keyword">return</span> x&gt;=p?x-p:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=(ll)ans*n%p;</span><br><span class="line">        n=(ll)n*n%p;k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;x=<span class="number">1</span>;y=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="built_in">exgcd</span>(b,a%b,y,x);y-=a/b*x;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> p)</span> </span>&#123;<span class="keyword">int</span> x,y;<span class="built_in">exgcd</span>(a,p,x,y);<span class="keyword">return</span> (x%p+p)%p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=s[i];++j) <span class="keyword">if</span>(j%p[i]) ans=(ll)ans*j%s[i];</span><br><span class="line">    ans=<span class="built_in">qpow</span>(ans,n/s[i],s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n/s[i]*s[i]+<span class="number">1</span>;j&lt;=n;++j) <span class="keyword">if</span>(j%p[i]) ans=(ll)ans*j%s[i];</span><br><span class="line">    <span class="keyword">return</span> (ll)ans*<span class="built_in">calc</span>(n/p[i],i)%s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">int</span> k=<span class="number">0</span>,a=<span class="built_in">calc</span>(n,i),b=<span class="built_in">calc</span>(m,i),c=<span class="built_in">calc</span>(n-m,i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n;j;j/=p[i]) k+=j/p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=m;j;j/=p[i]) k-=j/p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n-m;j;j/=p[i]) k-=j/p[i];</span><br><span class="line">    <span class="keyword">return</span> (ll)a*<span class="built_in">rev</span>(b,s[i])%s[i]*<span class="built_in">rev</span>(c,s[i])%s[i]*<span class="built_in">qpow</span>(p[i],k,s[i])%s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mod,w[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">CRT</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) &#123;</span><br><span class="line">        res=<span class="built_in">inc</span>(res,(ll)<span class="built_in">rev</span>(mod/s[i],s[i])*(mod/s[i])%mod*<span class="built_in">C</span>(n,m,i)%mod,mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,sum=<span class="number">0</span>;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;mod,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,w+i);sum+=w[i];&#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=t;++i) <span class="keyword">if</span>(t%i==<span class="number">0</span>) &#123;</span><br><span class="line">            p[++cnt]=i;s[cnt]=<span class="number">1</span>;<span class="keyword">while</span>(t%i==<span class="number">0</span>) &#123;++c[cnt];t/=i;s[cnt]*=i;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;ans=(ll)ans*<span class="built_in">CRT</span>(n,w[i])%mod;n-=w[i];&#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;有 $n$ 件礼物，打算送给 $m$ 个人，其中送给第 $i$ 个人的礼物数量为 $w_i$，求送出礼物的方案数，输出答案模</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="中国剩余定理" scheme="https://whz0325.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
    <category term="数论" scheme="https://whz0325.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="组合计数" scheme="https://whz0325.github.io/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【CTSC 2017】吉夫特</title>
    <link href="https://whz0325.github.io/ctsc-2017-gift/"/>
    <id>https://whz0325.github.io/ctsc-2017-gift/</id>
    <published>2019-04-28T01:49:00.000Z</published>
    <updated>2021-06-16T08:51:43.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个长度为 $n$ 的序列 $A$，求有多少个子序列满足所选下标集合为 ${b_1,b_2,\dots,b_k}$ 时 $a_{b_1}\ge a_{b_2}\ge\dots\ge a_{b_{k-1}}\ge a_{b_k}$ 且 $\prod_{i=2}^kC_{a_{i-1}}^{a_i}\equiv 1\pmod 2$，输出答案模 $10^9+7$ 的值。</p><p>$1\le n\le 211985$，$1\le a_i\le 233333$。所有的 $a_i$ 互不相同，也就是说不存在 $i,j$ 同时满足 $1\le i\lt j\le n$ 和 $a_i=a_j$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>分析组合数连乘的式子，由于模数很小为 $2$，考虑使用 Lucas 定理求解。</p><p>这里需要想到，Lucas 定理拆分后的组合数中每一项只可能有四种情况，即 $C_0^0=C_1^0=C_1^1=1$ 或 $C_0^1=0$，这表明相邻两个数二进制拆分后不存在 $a_i$ 上的一位大于 $a_{i-1}$ 上对应的位，看作集合的话说明 $a_i$ 是 $a_{i-1}$ 的子集，也就是 $a_{i-1}\bigcap a_i=a_i$，同时也满足了这是一个不下降的子序列，因为一定有 $a_{i-1}\ge a_i$。</p><p>一个暴力的做法是考虑 DP，定义 $f[i]$ 表示处理以第 $i$ 个数为末尾的方案数，枚举上一个选择的数的下标 $j$ 即可转移。时间复杂度为 $O(n^2)$，期望得分 $70$ 分。</p><p>注意到前面选取的数一定是当前数超集（二进制状态下看作集合时），可以重新定义 DP 方程，设 $f[i][j]$ 表示前  $i$ 个数中，当前子序列末尾的数为 $j$（可以看作集合）时的方案数，转移只需要枚举子集就可以了，因为 $n$ 比 $a_i$ 的最大值要小，而 $233333\lt 2^{18}$，因此总的时间复杂度为 $O(3^{18})$。</p><p>很多网上的题解到这里就结束了，但这个复杂度显然是不靠谱的，可以通过拆位的方法对其进行优化。</p><p>枚举 $i$ 后可以将第一维省略掉，设 $f[x][y]$ 表示低 $9$ 位为 $y$ 且高 $9$ 位为 $x$ 的超集的方案数，这样在每次查询时就只需枚举低 $9$ 位的超集，每次修改时只需枚举高 $9$ 位的子集，时间复杂度为 $O(6^9)$。</p><blockquote><p>怎么枚举超集呢？只需枚举补集的子集再取补集就可以了。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=(<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x-=y;<span class="keyword">return</span> x&lt;<span class="number">0</span>?x+mod:x;&#125;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">9</span>][<span class="number">1</span>&lt;&lt;<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="keyword">int</span> x=(a&gt;&gt;<span class="number">9</span>),y=(a&amp;((<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;y=(y^(<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>);<span class="built_in">inc</span>(res,f[x][(<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> s=y;s;s=((s<span class="number">-1</span>)&amp;y)) <span class="built_in">inc</span>(res,f[x][s^((<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>)]);</span><br><span class="line">        y=(y^((<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>));<span class="built_in">inc</span>(f[<span class="number">0</span>][y],res);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> s=x;s;s=((s<span class="number">-1</span>)&amp;x)) <span class="built_in">inc</span>(f[s][y],res);</span><br><span class="line">        <span class="built_in">inc</span>(ans,<span class="built_in">dec</span>(res,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个长度为 $n$ 的序列 $A$，求有多少个子序列满足所选下标集合为 ${b_1,b_2,\dots,b_k}$ 时 </summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
    <category term="位运算" scheme="https://whz0325.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【清华集训 2016】组合数问题</title>
    <link href="https://whz0325.github.io/bzoj-4737/"/>
    <id>https://whz0325.github.io/bzoj-4737/</id>
    <published>2019-04-26T14:34:00.000Z</published>
    <updated>2019-04-26T14:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$t$ 组数据，每组数据给定 $n,m$ 和 $k$，求对于所有的 $0\le i\le n$，$0\le j\le \min(i,m)$ 有多少对 $(i,j)$ 满足 $C_i^j$ 是 $k$ 的倍数。</p><p>$1\le n,m\le 10^{18}$，$1\le t,k\le 100$，且 $k$ 是一个质数。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>问题所求即有多少对 $(i,j)$ 满足 $C_i^j%k=0$，观察到 $k$ 比较小且为质数，可以使用 Lucas 定理求解。</p><p>要使结果为 $0$，Lucas 定理的过程中一定有一部分乘积为 $0$，组合数 $C_n^k$ 当且仅当 $k\gt n$ 时值为 $0$，考虑数位 DP，直接求解比较复杂，将至少有一部分乘积为 $0$ 转化为总的方案数减去没有任何一部分为 $0$ 的方案数。</p><p>先考虑总的方案数如何计算，分成 $n\le m$ 和 $n\gt m$ 两部分，前半部分显然是 $1+2+\dots +(m+1)=\frac{(m+1)\times(m+2)}{2}$，后半部分显然每个 $n$ 有 $[0,m]$ 共 $m+1$ 种 $i$ 可用，共有 $n-m$ 个大于 $m$ 的 $n$，因此总的方案数为 $\frac{(m+1)(m+2)}{2}+(m+1)(n-m)$。</p><p>当 $k=1$ 时答案就是总的方案数，否则 Lucas 定理的过程中最多有 $log_2(10^{18})=60$ 位，则没有任何一部分为 $0$ 的方案数可以设 $f[i][0/1][0/1]$ 表示从左到右前 $i$ 位，$n$ 目前是/否达到上界以及 $m$ 目前是/否达到上界时没有任何一部分为 $0$ 的方案数，设计转移即可。</p><p>时间复杂度为 $O(60t)$。</p><p>注意由于每一部分的上界是一个余数，因此存在 $k\le n$ 但 $k$ 到达上界而 $n$ 没有的情况，这表明 $f[i][0][1]$ 是有意义的。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=(<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">return</span> x&gt;=mod?x-mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x-=y;<span class="keyword">return</span> x&lt;<span class="number">0</span>?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (ll)x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=<span class="built_in">mul</span>(ans,n);</span><br><span class="line">        n=<span class="built_in">mul</span>(n,n);k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    m=std::<span class="built_in">min</span>(n,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">inc</span>(<span class="built_in">mul</span>(<span class="built_in">mul</span>(m+<span class="number">1</span>,m+<span class="number">2</span>),<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>)),(m+<span class="number">1</span>&lt;=n)?<span class="built_in">mul</span>(m+<span class="number">1</span>,n-m):<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> upn[<span class="number">65</span>],upm[<span class="number">65</span>],cnt=<span class="number">0</span>,f[<span class="number">65</span>][<span class="number">2</span>][<span class="number">2</span>];<span class="comment">//当前从高到低处理到第i位，n是否达到上界0/1，m是否达到上界0/1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ll n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);m=std::<span class="built_in">min</span>(n,m);<span class="comment">//保证m不超过n</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="built_in">inc</span>(<span class="built_in">mul</span>(<span class="built_in">mul</span>((m+<span class="number">1</span>)%mod,(m+<span class="number">2</span>)%mod),<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>)),(m+<span class="number">1</span>&lt;=n)?<span class="built_in">mul</span>((m+<span class="number">1</span>)%mod,(n-m)%mod):<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        cnt=<span class="number">0</span>;<span class="keyword">while</span>(n||m) &#123;++cnt;upn[cnt]=n%k;n/=k;upm[cnt]=m%k;m/=k;&#125;</span><br><span class="line">        std::<span class="built_in">reverse</span>(upn+<span class="number">1</span>,upn+<span class="number">1</span>+cnt);std::<span class="built_in">reverse</span>(upm+<span class="number">1</span>,upm+<span class="number">1</span>+cnt);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(<span class="built_in">mul</span>(k,k+<span class="number">1</span>),<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>))));<span class="comment">//0~k-1 0~k-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">calc</span>(k<span class="number">-1</span>,upm[i]<span class="number">-1</span>)));<span class="comment">//0~k-1 0~upm-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">calc</span>(upn[i]<span class="number">-1</span>,k<span class="number">-1</span>)));<span class="comment">//0~upn-1 0~k-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>],<span class="built_in">calc</span>(upn[i]<span class="number">-1</span>,upm[i]<span class="number">-1</span>)));<span class="comment">//0~upn-1 0~upm-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">0</span>][<span class="number">1</span>],k-upm[i]));<span class="comment">//0~k-1 upm</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>],upn[i]&gt;=upm[i]?upn[i]-upm[i]:<span class="number">0</span>));<span class="comment">//0~upn-1 upm</span></span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">0</span>],std::<span class="built_in">min</span>(upn[i]+<span class="number">1</span>,k)));<span class="comment">//upn 0~k-1</span></span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>],std::<span class="built_in">min</span>(upn[i]+<span class="number">1</span>,upm[i])));<span class="comment">//upn 0~upm-1</span></span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">inc</span>(f[i][<span class="number">1</span>][<span class="number">1</span>],f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>]*(upm[i]&lt;=upn[i]));<span class="comment">//upn upm</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">dec</span>(ans,<span class="built_in">inc</span>(<span class="built_in">inc</span>(<span class="built_in">inc</span>(f[cnt][<span class="number">0</span>][<span class="number">0</span>],f[cnt][<span class="number">0</span>][<span class="number">1</span>]),f[cnt][<span class="number">1</span>][<span class="number">0</span>]),f[cnt][<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;$t$ 组数据，每组数据给定 $n,m$ 和 $k$，求对于所有的 $0\le i\le n$，$0\le j\le \mi</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
    <category term="数位DP" scheme="https://whz0325.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>【音乐】山海</title>
    <link href="https://whz0325.github.io/mountain-and-sea/"/>
    <id>https://whz0325.github.io/mountain-and-sea/</id>
    <published>2019-04-22T11:45:00.000Z</published>
    <updated>2019-08-09T09:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<center>我看着天真的我自己</center><center>出现在没有我的故事里</center><center>等待着我的回应</center><center>一个为何至此的原因</center><hr><center>他明白 他明白</center><center>我给不起</center><center>于是转生向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转生向大海走去</center><hr><center>我听着那少年的声音</center><center>在还有未来的过去</center><center>渴望着美好结局</center><center>却没能成为自己</center><center>却没能成为自己</center><hr><center>他明白 他明白</center><center>我给不起</center><center>于是转生向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转生向大海走去</center><hr><center>他明白 他明白</center><center>我给不起</center><center>于是转身向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转身向大海走去</center><center>于是转身向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转身向大海走去</center><center>于是转身向大海走去</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;我看着天真的我自己&lt;/center&gt;

&lt;center&gt;出现在没有我的故事里&lt;/center&gt;

&lt;center&gt;等待着我的回应&lt;/center&gt;

&lt;center&gt;一个为何至此的原因&lt;/center&gt;

&lt;hr&gt;
&lt;center&gt;他明白 他明白&lt;/center&gt;</summary>
      
    
    
    
    <category term="音乐" scheme="https://whz0325.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>【SDOI 2010】古代猪文</title>
    <link href="https://whz0325.github.io/bzoj-1951/"/>
    <id>https://whz0325.github.io/bzoj-1951/</id>
    <published>2019-04-18T14:55:00.000Z</published>
    <updated>2019-04-18T15:04:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个整数 $n,g​$，求 $g^{\sum_{k|n}C_n^k}\mod 999911659​$ 的值。$1\le n,g\le 10^9​$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>当 $g​$ 与模数 $999911659​$ 互质时，根据欧拉定理得 $g^{\sum_{k|n}C_n^k}\mod 999911659=g^{\sum_{k|n}C_n^k\mod 999911658}\mod 999911659​$，问题转化为求 $\sum_{k|n}C_n^k\mod 999911658​$ 的值；若不互质，由于模数是质数，当且仅当 $g​$ 是它倍数，此时答案为 $0​$。</p><p>$O(\sqrt{n})​$ 枚举约数 $k​$，将 $999911658​$ 分解质因数得 $999911659=2\times 3\times 4679\times 35617​$，可以利用 Lucas 定理算出组合数模每个质因子得到的结果，列出同余方程后用中国剩余定理求解即可。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">999911658</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pri[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4679</span>,<span class="number">35617</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=(ll)ans*n%p;</span><br><span class="line">        n=(ll)n*n%p;k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">40005</span>][<span class="number">4</span>],inv[<span class="number">40005</span>][<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;x=<span class="number">1</span>;y=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="built_in">exgcd</span>(b,a%b,y,x);y-=a/b*x;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!k||n==k) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n&lt;pri[id]&amp;&amp;k&lt;pri[id]) <span class="built_in"><span class="keyword">return</span></span> (ll)pre[n][id]*inv[n-k][id]%pri[id]*inv[k][id]%pri[id];</span><br><span class="line">    <span class="keyword">return</span> (ll)<span class="built_in">Lucas</span>(n/pri[id],k/pri[id],id)*<span class="built_in">Lucas</span>(n%pri[id],k%pri[id],id)%pri[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,g;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ExLucas</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;<span class="built_in">exgcd</span>(mod/pri[j],pri[j],x,y);x=(x%pri[j]+pri[j])%pri[j];</span><br><span class="line">        ans=(ans+(ll)<span class="built_in">Lucas</span>(n,k,j)*x%mod*(mod/pri[j])%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;g);</span><br><span class="line">    <span class="keyword">if</span>(g==<span class="number">999911659</span>) &#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;++j) pre[<span class="number">0</span>][j]=inv[<span class="number">0</span>][j]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">35617</span>;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;++j) &#123;</span><br><span class="line">            pre[i][j]=(ll)pre[i<span class="number">-1</span>][j]*i%pri[j];</span><br><span class="line">            inv[i][j]=<span class="built_in">qpow</span>(pre[i][j],pri[j]<span class="number">-2</span>,pri[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=n;++i) <span class="keyword">if</span>(n%i==<span class="number">0</span>) &#123;</span><br><span class="line">        ans=(ans+<span class="built_in">ExLucas</span>(i))%mod;</span><br><span class="line">        <span class="keyword">if</span>(i*i!=n) ans=(ans+<span class="built_in">ExLucas</span>(n/i))%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">qpow</span>(g,ans,<span class="number">999911659</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定两个整数 $n,g​$，求 $g^{\sum_{k|n}C_n^k}\mod 999911659​$ 的值。$1\le </summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
    <category term="中国剩余定理" scheme="https://whz0325.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【WC 2010】重建计划</title>
    <link href="https://whz0325.github.io/wc-2010-rebuild/"/>
    <id>https://whz0325.github.io/wc-2010-rebuild/</id>
    <published>2019-04-11T10:03:28.000Z</published>
    <updated>2019-04-14T00:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一棵 $n​$ 个节点的树，每条边有其对应的价值 $v_i​$，要求一条路径，长度满足在 $[L,U]​$ 内且路径上的边权总和与边数之比最大，输出这个最大值，结果保留三位小数。</p><p>$n\le 100,000$，$1\le L\le U\le n-1$，$v_i\le 10^6$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>考虑二分答案，将每条边的权值减去二分的值，问题转化为求树上是否存在一条路径满足其上边权和非负。</p><p>点分治，将树上路径分为两种情况，一种是在子树中，递归计算即可，另一种是经过根节点，此时在每个子树中，我们都需要枚举与之前点连成的路径，判断其长度的最大值是否非负。将之前子树中的点按到根节点的深度排序（其实由于子树中到根节点的长度连续，开一个权值数组 $h[i]$ 保存深度为 $i$ 的节点到根节点路径长度的最大值就可以了），对当前子树也单独开一个数组保存排序后的值，然后按深度从大到小枚举节点，不难发现之前的子树中满足与当前节点连接后路径长度在 $[L,U]$ 之间的点的区间逐步右移，要选取长度最大的路径，使用单调队列维护滑动窗口最大值即可。</p><p>然而这样的时间复杂度肯定是不对的，这时我们将访问的子节点按链长顺序遍历就可以保证之前访问路径的长度不超过 $\frac{size}{2}$，因此时间复杂度优化到 $O(nlog_2^2n)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> std::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span><span class="keyword">int</span> v;<span class="keyword">double</span> w;&#125; edges[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],nxt[N&lt;&lt;<span class="number">1</span>],idx=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    edges[++idx]=(edge)&#123;v,w&#125;;nxt[idx]=head[u];head[u]=idx;</span><br><span class="line">    edges[++idx]=(edge)&#123;u,w&#125;;nxt[idx]=head[v];head[v]=idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[N],tot[N],sum,rttot,rt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    tot[x]=<span class="number">1</span>;<span class="keyword">int</span> mxtot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];i;i=nxt[i]) &#123;</span><br><span class="line">        edge &amp;e=edges[i];<span class="keyword">if</span>(e.v==fa||vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">getrt</span>(e.v,x);tot[x]+=tot[e.v];mxtot=std::<span class="built_in">max</span>(mxtot,tot[e.v]);</span><br><span class="line">    &#125;</span><br><span class="line">    mxtot=std::<span class="built_in">max</span>(mxtot,sum-tot[x]);</span><br><span class="line">    <span class="keyword">if</span>(mxtot&lt;rttot) &#123;rttot=mxtot;rt=x;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[N],mxdep;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getmxdep</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    mxdep=std::<span class="built_in">max</span>(mxdep,dep[x]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];i;i=nxt[i]) &#123;</span><br><span class="line">        edge &amp;e=edges[i];<span class="keyword">if</span>(e.v==fa||vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[e.v]=dep[x]+<span class="number">1</span>;<span class="built_in">getmxdep</span>(e.v,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">P tmp[N];std::vector&lt;<span class="keyword">int</span>&gt; es[N],rts[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x]=<span class="literal">true</span>;<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];i;i=nxt[i]) &#123;</span><br><span class="line">        edge &amp;e=edges[i];<span class="keyword">if</span>(vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">        mxdep=<span class="number">0</span>;dep[e.v]=<span class="number">1</span>;<span class="built_in">getmxdep</span>(e.v,x);tmp[cnt++]=<span class="built_in">P</span>(mxdep,i);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(tmp,tmp+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i) es[x].<span class="built_in">push_back</span>(tmp[i].second);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>,end=es[x].<span class="built_in">size</span>();i&lt;end;++i) &#123;</span><br><span class="line">        edge &amp;e=edges[es[x][i]];<span class="keyword">if</span>(vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">        sum=rttot=tot[e.v];<span class="built_in">getrt</span>(e.v,<span class="number">0</span>);rts[x].<span class="built_in">push_back</span>(rt);<span class="built_in">build</span>(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type</span> &#123;</span><span class="keyword">int</span> dep;<span class="keyword">double</span> val;&#125; cur[N];</span><br><span class="line"><span class="keyword">double</span> ans,val[N],box[N],h[N];<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    cur[cnt++]=(type)&#123;dep[x],val[x]&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];i;i=nxt[i]) &#123;</span><br><span class="line">        edge &amp;e=edges[i];<span class="keyword">if</span>(e.v==fa||vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">        dep[e.v]=dep[x]+<span class="number">1</span>;val[e.v]=val[x]+e.w;<span class="built_in">calc</span>(e.v,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,L,U,q[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x]=<span class="literal">true</span>;<span class="keyword">int</span> lstdep=h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>,end=es[x].<span class="built_in">size</span>();i&lt;end;++i) &#123;</span><br><span class="line">        edge &amp;e=edges[es[x][i]];<span class="keyword">if</span>(vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">        cnt=mxdep=<span class="number">0</span>;dep[e.v]=<span class="number">1</span>;val[e.v]=e.w;<span class="built_in">calc</span>(e.v,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;++j) &#123;</span><br><span class="line">            mxdep=std::<span class="built_in">max</span>(mxdep,cur[j].dep);</span><br><span class="line">            box[cur[j].dep]=std::<span class="built_in">max</span>(box[cur[j].dep],cur[j].val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> head=<span class="number">1</span>,tail=<span class="number">0</span>,ls=L-mxdep,rs=U-mxdep;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=std::<span class="built_in">max</span>(ls,<span class="number">0</span>);j&lt;=std::<span class="built_in">min</span>(rs,lstdep);++j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;=tail&amp;&amp;h[q[tail]]&lt;h[j]) --tail;q[++tail]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head&lt;=tail) &#123;ans=std::<span class="built_in">max</span>(ans,box[mxdep]+h[q[head]]);<span class="keyword">if</span>(ans&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=mxdep<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j) &#123;</span><br><span class="line">            ++ls;++rs;</span><br><span class="line">            <span class="keyword">if</span>(rs&lt;=lstdep) &#123;<span class="keyword">while</span>(head&lt;=tail&amp;&amp;h[q[tail]]&lt;h[rs]) --tail;q[++tail]=rs;&#125;</span><br><span class="line">            <span class="keyword">while</span>(head&lt;=tail&amp;&amp;q[head]&lt;ls) ++head;</span><br><span class="line">            <span class="keyword">if</span>(head&lt;=tail) &#123;ans=std::<span class="built_in">max</span>(ans,box[j]+h[q[head]]);<span class="keyword">if</span>(ans&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lstdep=std::<span class="built_in">max</span>(lstdep,mxdep);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mxdep;++j) h[j]=std::<span class="built_in">max</span>(h[j],box[j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=mxdep;++j) box[j]=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lstdep;++i) h[i]=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>,end=es[x].<span class="built_in">size</span>();i&lt;end;++i) &#123;</span><br><span class="line">        edge &amp;e=edges[es[x][i]];<span class="keyword">if</span>(!vis[e.v]&amp;&amp;<span class="built_in">solve</span>(rts[x][i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=idx;++i) edges[i].w-=num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) h[i]=box[i]=<span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    ans=<span class="number">-0x3f3f3f3f</span>;<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));<span class="built_in">solve</span>(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=idx;++i) edges[i].w+=num;</span><br><span class="line">    <span class="keyword">return</span> ans&gt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;L,&amp;U);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;<span class="keyword">int</span> a,b,v;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;v);<span class="built_in">add</span>(a,b,v);&#125;</span><br><span class="line">    sum=rttot=n;<span class="built_in">getrt</span>(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">build</span>(root=rt);</span><br><span class="line">    <span class="keyword">double</span> l=<span class="number">0</span>,r=<span class="number">1e6</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1e-4</span>) <span class="built_in">check</span>(mid=(l+r)/<span class="number">2</span>)?l=mid:r=mid;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一棵 $n​$ 个节点的树，每条边有其对应的价值 $v_i​$，要求一条路径，长度满足在 $[L,U]​$ 内且路径上的</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="点分治" scheme="https://whz0325.github.io/tags/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
    <category term="单调队列" scheme="https://whz0325.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
    <category term="分数规划" scheme="https://whz0325.github.io/tags/%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【TJOI 2015】弦论</title>
    <link href="https://whz0325.github.io/bzoj-3998/"/>
    <id>https://whz0325.github.io/bzoj-3998/</id>
    <published>2019-03-25T08:43:00.000Z</published>
    <updated>2021-06-16T09:46:45.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，求它的第 $k$ 小子串，$t=0$ 表示不同位置的相同子串算作一个，$t=1$ 表示不同位置的相同子串算作多个，无解输出 $-1$。</p><p>$n\le 5\times 10^5$，$t\in {0,1}$，$k\le 10^9$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>利用后缀自动机的性质求解。</p><p>首先对字符串建立后缀自动机，求出每个节点的 $endpos$ 大小，即该状态表示的子串在原字符串中出现的次数。（若 $t=0$ 要单独置为 $1$）</p><p>$endpos$ 大小怎么求呢？首先再每插入一个字符时将新节点（叶子节点）的出现次数标记为 $1$，然后按照 $len$ 大小将所有节点基数排序，从大到小将子节点的出现次数累加进父节点即可。</p><p>这个基数排序的结果不但在后缀链接树上可以用，在状态转移图上也可以用，因为每次转移必定有转移后节点的 $len$ 不小于当前节点的 $len$。</p><p>再在状态转移图上以相同的方式统计每个节点能够转移到的子串个数，最后 $DFS$ 一遍选取第 $k$ 小的子串。</p><p>注意事项：</p><ul><li>数组开两倍，不单是后缀自动机相关的数组，与后缀自动机节点数规模相同的数组也应当开两倍大小。</li><li>基数排序时累加和的枚举范围应当是 $[1,n]$，因为根节点的 $len$ 值为 $0$。</li><li>第一次基数排序再统计之后需要保证根节点的 $endpos$ 大小即在原字符串中的出现次数为 $0$，因为根节点并不表示任何一个子串。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">int</span> ch[N&lt;&lt;<span class="number">1</span>][<span class="number">26</span>],fa[N&lt;&lt;<span class="number">1</span>],len[N&lt;&lt;<span class="number">1</span>],sz[N&lt;&lt;<span class="number">1</span>],tot=<span class="number">1</span>,lst=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p=lst,np=++tot;len[np]=len[p]+<span class="number">1</span>;sz[np]=<span class="number">1</span>;lst=np;</span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;!ch[p][c]) ch[p][c]=np,p=fa[p];</span><br><span class="line">    <span class="keyword">if</span>(!p) fa[np]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> q=ch[p][c];</span><br><span class="line">        <span class="keyword">if</span>(len[p]+<span class="number">1</span>==len[q]) fa[np]=q;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> nq=++tot;<span class="built_in">memcpy</span>(ch[nq],ch[q],<span class="built_in"><span class="keyword">sizeof</span></span>(ch[q]));</span><br><span class="line">            len[nq]=len[p]+<span class="number">1</span>;fa[nq]=fa[q];fa[q]=fa[np]=nq;</span><br><span class="line">            <span class="keyword">while</span>(p&amp;&amp;ch[p][c]==q) ch[p][c]=nq,p=fa[p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[N];<span class="keyword">int</span> c[N],res[N&lt;&lt;<span class="number">1</span>],f[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=sz[x]) <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        k-=sz[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i) <span class="keyword">if</span>(ch[x][i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(k&lt;=f[ch[x][i]]) &#123;<span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>+i);<span class="built_in">solve</span>(ch[x][i],k);<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> k-=f[ch[x][i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);<span class="keyword">int</span> t,k,n=<span class="built_in">strlen</span>(s);<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">extend</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) ++c[len[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;++i) res[c[len[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=tot;i&gt;=<span class="number">2</span>;--i) sz[fa[res[i]]]+=sz[res[i]];</span><br><span class="line">    f[<span class="number">1</span>]=sz[<span class="number">1</span>]=<span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;++i) f[i]=sz[i]=(t?sz[i]:<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;--i) <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)</span><br><span class="line">        <span class="keyword">if</span>(ch[res[i]][j]) f[res[i]]+=f[ch[res[i]][j]];</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=f[<span class="number">1</span>]) <span class="built_in">solve</span>(<span class="number">1</span>,k);<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个字符串，求它的第 $k$ 小子串，$t=0$ 表示不同位置的相同子串算作一个，$t=1$ 表示不同位置的相同子串算作</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="后缀自动机" scheme="https://whz0325.github.io/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【AHOI 2008】逆序对</title>
    <link href="https://whz0325.github.io/bzoj-1831/"/>
    <id>https://whz0325.github.io/bzoj-1831/</id>
    <published>2019-03-24T00:36:00.000Z</published>
    <updated>2019-03-24T00:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个由 $[1,k]$ 之间的数字组成的长度为 $n$ 序列，其中有一些位置上的数不可见，标记为 $-1$，求这个序列的最少逆序对数。</p><p>$n\le 10000$，$k\le 100$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>首先需要发现一个结论：要使逆序对数最少，从前到后依次填写的不可见的数字一定单调不下降。</p><p>一个感性的理解是，如果填写的数字不满足单调不下降，那么其本身就会产生逆序对。但这样似乎不太严谨，考虑如何证明。</p><p>设两个待填写的位置 $x,y$ 上的数 $A,B$，有 $x\lt y,A\le B$，$[1,x-1]$ 中比 $A$ 大的数的个数为 $a$，比 $B$ 大的数的个数为 $b$，$[x+1,y]$ 中比 $A$ 大的数的个数为 $c$，比 $B$ 大的数的个数为 $d$。</p><p>则当 $A$ 在 $x$ 而 $B$ 在 $y$ 时，两者对答案的贡献为 $a+b+d$；当 $B$ 在 $x$ 而 $A$ 在 $y$ 时，两者对答案的贡献为 $b+a+c+1$。由于 $A\le B$，因此 $c\ge d$，则 $a+b+d\lt b+a+c+1$。所以将值更小的数放在前面得到的逆序对数更少。</p><p>有了这个结论之后就可以 DP 了，设 $f[i][j]$ 表示前 $i$ 个数字中，不可见的数已经填到了数字 $j$ 的最小逆序对数，暴力 DP 然后用前缀和优化一下就好，时间复杂度为 $O(nk)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></span><br><span class="line"><span class="keyword">int</span> a[N],f[N][<span class="number">105</span>],front[<span class="number">105</span>],back[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);<span class="keyword">if</span>(~a[i]) ++back[a[i]];&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;++i) back[i]+=back[i<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(~a[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j) f[i][j]=f[i<span class="number">-1</span>][j]+back[a[i]<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=a[i];j&lt;=k;++j) ++front[j],--back[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j) f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=k;++j) f[i][j]=std::<span class="built_in">min</span>(f[i][j],f[i][j<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j) f[i][j]+=back[j<span class="number">-1</span>]+front[k]-front[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) ans=std::<span class="built_in">min</span>(ans,f[n][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个由 $[1,k]$ 之间的数字组成的长度为 $n$ 序列，其中有一些位置上的数不可见，标记为 $-1$，求这个序列的</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【CF 981D】Bookshelves</title>
    <link href="https://whz0325.github.io/cf-981d/"/>
    <id>https://whz0325.github.io/cf-981d/</id>
    <published>2019-03-23T03:35:00.000Z</published>
    <updated>2021-06-16T15:17:58.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个长度为 $n$ 的数列 $a_i$，将其划分为 $k$ 个连续的子段，每一段和相与的值最大是多少。</p><p>$1\le k\le n\le 50$，$0\lt a_i\le 2^{50}$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>看到相与的值最大，考虑按位贪心，定义 $f_{i,j}$ 表示将前 $i$ 个数划分为 $j$ 段时能否满足前面所有位都为已经求出的最大值且当前枚举到的位为 $1$。</p><p>设当前正在判断的数为 $x$，则状态转移方程为 $f_{i,j}=f_{i,j}\bigcup (f_{k,j-1}\bigcap [((\sum\limits_{t=1}^ia_t-\sum\limits_{t=1}^ka_t)\bigcap x)=x])$。</p><p>时间复杂度为 $O(n^3)$。注意 $\sum a_t$ 的大小为 $50\times2^{50}$，因此需要枚举更多的位，同时 <code>1&lt;&lt;x</code> 默认是 <code>int</code> 所以要写成 <code>1ULL&lt;&lt;x</code>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ull;</span><br><span class="line"><span class="keyword">int</span> n,K;ull a[N];<span class="keyword">bool</span> f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(ull x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;++j) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;++k) &#123;</span><br><span class="line">                f[i][j]|=(f[k][j<span class="number">-1</span>]&amp;&amp;(((a[i]-a[k])&amp;x)==x));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[n][K];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;K);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>,a+i);a[i]+=a[i<span class="number">-1</span>];&#125;</span><br><span class="line">    ull ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;--i) <span class="keyword">if</span>(<span class="built_in">check</span>(ans|(<span class="number">1ULL</span>&lt;&lt;i))) ans|=(<span class="number">1ULL</span>&lt;&lt;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个长度为 $n$ 的数列 $a_i$，将其划分为 $k$ 个连续的子段，每一段和相与的值最大是多少。&lt;/p&gt;
&lt;p&gt;$</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="位运算" scheme="https://whz0325.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【ZJOI 2012】波浪</title>
    <link href="https://whz0325.github.io/zjoi-2012-wavel/"/>
    <id>https://whz0325.github.io/zjoi-2012-wavel/</id>
    <published>2019-03-23T01:36:00.000Z</published>
    <updated>2019-06-23T10:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>由 $[1,n]$ 组成的排列，求其波动强度大于 $m$ 的概率，结果保留 $k$ 位小数。定义波动强度为每个数与其相邻数的差的绝对值之和。</p><p>$n\le 100$，$k\le 30$，$m\le 2147483647$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>求波度强度大于 $m$ 的概率，我们可以求出每个波度强度的方案数，累加起来除以 $n!$ 即可。</p><p>考虑拆掉<strong>绝对值符号，对每个数分别计算贡献</strong>，对于一个数 $x$，如果它旁边的数比它小，那么它此时对答案的贡献就是 $x$，否则就是 $-x$。</p><p>我们从 $1$ 到 $n$ 一个一个数地去填，定义 $f[i][j][k][l]$ 表示填了前 $i$ 个数，当前有 $j$ 段，波动强度为 $k$，被填充的边界数量为 $l$ 时的方案数。需要解释的是，这里填充时并没有将一个数填充到一个特定的位置，而是悬浮在那里，通过控制当前段数与边界数确定一个状态。</p><p>如何转移？统一说明，计算 $k$ 那一位的变化实际上是因为按顺序填充时前面已经填充的数一定比当前填充的数要小，后面填充的数一定比当前填充的数要大，因此可以先将当前数累积入贡献。</p><ol><li>新填入的数单独作为一段：$f_{i,j+1,k-i-i,l}+=(j+1-l)f_{i-1,j,k,l}$，当前有 $j$ 段，那么新添入的数可以放入的空隙有 $j+1$ 个，假若已经有 $l$ 段是边界了，那么就不能放在其外面，因此需要减去。</li><li>新填入的数与原来的段拼起来作为一段：$f_{i,j,k,l}+=(j+j-l)f_{i-1,j,k,l}$，可以填到每个已有段的左右两边，减去边界与上面同理。</li><li>新填入的数合并原来的两段：$f_{i,j-1,k+i+i,l}+=(j-1)f_{i-1,j,k,l}$，可以合并任意相邻的两段。</li><li>新填入的数被放置在边界作为单独的一段：$f_{i,j+1,k-i,l+1}+=(2-l)f_{i-1,j,k,l}$，枚举放在左右哪个边界。</li><li>新填入的数合并原来的段与边界（此时如果合并原来的段与边界的段可能会在小数据下出现问题）：$f_{i,j,k+i,l+1}+=(2-l)f_{i,j,k,l}$，同样是枚举放在左右哪个边界，注意保证至少有一个段存在。</li></ol><p>注意使用滚动数组优化空间复杂度，由于精度要求较高，针对 $k$ 比较大的情况使用 <code>__float128</code> 计算。</p><p>需要卡卡空间（比如把 <code>long double</code> 换成 <code>double</code>），时间复杂度为 $O(n^4)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n,m,k;<span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(T f[<span class="number">2</span>][<span class="number">101</span>][<span class="number">9001</span>][<span class="number">3</span>])</span> </span>&#123;</span><br><span class="line">    T ans=<span class="number">0</span>;f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">4500</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;<span class="comment">//当前放第i个数</span></span><br><span class="line">        <span class="built_in">memset</span>(f[i&amp;<span class="number">1</span>],<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f[i&amp;<span class="number">1</span>]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j) &#123;<span class="comment">//前面已经有j段了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">9000</span>;++k) &#123;<span class="comment">//枚举波动强度</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">2</span>;++l) <span class="keyword">if</span>(f[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][j][k][l]) &#123;<span class="comment">//枚举边界情况</span></span><br><span class="line">                    <span class="keyword">if</span>(k-i-i&gt;=<span class="number">0</span>) f[i&amp;<span class="number">1</span>][j+<span class="number">1</span>][k-i-i][l]+=f[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][j][k][l]*(j+<span class="number">1</span>-l);<span class="comment">//放置为新连通块</span></span><br><span class="line">                    <span class="keyword">if</span>(j) f[i&amp;<span class="number">1</span>][j][k][l]+=f[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][j][k][l]*(j+j-l);<span class="comment">//放在一个连通块的旁边</span></span><br><span class="line">                    <span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">1</span>&amp;&amp;k+i+i&lt;=<span class="number">9000</span>) f[i&amp;<span class="number">1</span>][j<span class="number">-1</span>][k+i+i][l]+=f[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][j][k][l]*(j<span class="number">-1</span>);<span class="comment">//合并两个连通块</span></span><br><span class="line">                    <span class="keyword">if</span>(k-i&gt;=<span class="number">0</span>&amp;&amp;l+<span class="number">1</span>&lt;=<span class="number">2</span>) f[i&amp;<span class="number">1</span>][j+<span class="number">1</span>][k-i][l+<span class="number">1</span>]+=f[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][j][k][l]*(<span class="number">2</span>-l);<span class="comment">//放一个新连通块在边界</span></span><br><span class="line">                    <span class="keyword">if</span>(j&amp;&amp;k+i&lt;=<span class="number">9000</span>&amp;&amp;l+<span class="number">1</span>&lt;=<span class="number">2</span>) f[i&amp;<span class="number">1</span>][j][k+i][l+<span class="number">1</span>]+=f[(i&amp;<span class="number">1</span>)^<span class="number">1</span>][j][k][l]*(<span class="number">2</span>-l);<span class="comment">//将一个连通块与边界合并</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">4500</span>+m;i&lt;=<span class="number">9000</span>;++i) ans+=f[n&amp;<span class="number">1</span>][<span class="number">1</span>][i][<span class="number">2</span>];<span class="comment">//枚举波动强度，累加方案数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ans/=i;<span class="built_in">printf</span>(<span class="string">&quot;0.&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) &#123;ans*=<span class="number">10</span>;<span class="keyword">int</span> x=(i^k)?ans:(ans+<span class="number">0.5</span>);<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,x);ans-=x;&#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">2</span>][<span class="number">101</span>][<span class="number">9001</span>][<span class="number">3</span>];__float128 g[<span class="number">2</span>][<span class="number">101</span>][<span class="number">9001</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=<span class="number">8</span>) <span class="built_in">solve</span>(f);<span class="keyword">else</span> <span class="built_in">solve</span>(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;由 $[1,n]$ 组成的排列，求其波动强度大于 $m$ 的概率，结果保留 $k$ 位小数。定义波动强度为每个数与其相邻数的</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
